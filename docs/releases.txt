===============
Release Process
===============

In order to allow for rapid, predictable release candidates and releases,
Setuptools uses a mechanical technique for releases, enacted by Travis
following a successful build of a tagged release per `PyPI deployment
<https://docs.travis-ci.com/user/deployment/pypi>`_.

Prior to cutting a release candidate, or release, please check that the
CHANGES.rst reflects the summary of changes since the last release.

Ideally, these changelog entries would have been added along with the changes,
but it's always good to check.  Think about it from the perspective of a user
not involved with the development--what would that person want to know about
what has changed--or from the perspective of your future self wanting to know
when a particular change landed.

To do the release, first cut a release candidate, then cut the final release.

For both release candidate and release, you will need `Bump2version
<https://pypi.python.org/pypi/bump2version>`_ (``pip install bump2version``).

Before making the release candidate, decide whether this is going to be a
major, minor or patch release, based on the scope of the changes in the
release.

Release candidate
-----------------

Run ``bump2version {part}`` where ``part`` is "major", "minor", or "patch"
from the release type you decided above::

    bump2version patch

Bump2version will:

* update the package version in ``setup.cfg`` and in ``setup.py``, appending
  ``rc1`` for the release candidate;
* commit this version change to version control (Git in our case);
* make a tag with the version number prepended by "v", e.g. ``v36.0.2rc1``.

Then, push the commits and the tag to the master branch, e.g::

    git push origin master
    git push origin v36.0.2rc1

If tests pass, the release candidate will be uploaded to PyPI (from the Python
3.6 tests).

Send an email to `distutils-sig <https://mail.python.org/mailman/listinfo/distutils-sig>`_ announcing the release candidate, with the changes relative to the last version, asking for testing via::

    pip install --pre setuptools

Release proper
--------------

If no issues arose from the release candidate above, release the code removing
the "rc1" suffix with::

    bump2version release

This removes the ``rc1`` suffix from the version number, makes the commit, and
makes the tag.

Then, push the commits and the tag to the master branch, e.g::

    git push origin master
    git push origin v36.0.2

Release Frequency
-----------------

Some have asked why Setuptools is released so frequently. Because Setuptools
uses a mechanical release process, it's very easy to make releases whenever the
code is stable (tests are passing). As a result, the philosophy is to release
early and often.

While some find the frequent releases somewhat surprising, they only empower
the user. Although releases are made frequently, users can choose the frequency
at which they use those releases. If instead Setuptools contributions were only
released in batches, the user would be constrained to only use Setuptools when
those official releases were made. With frequent releases, the user can govern
exactly how often he wishes to update.

Frequent releases also then obviate the need for dev or beta releases in most
cases. Because releases are made early and often, bugs are discovered and
corrected quickly, in many cases before other users have yet to encounter them.

Release Managers
----------------

Additionally, anyone with push access to the master branch has access to cut
releases.

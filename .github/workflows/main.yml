name: tests

on: [push, pull_request, workflow_dispatch]

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      python-version-for-build: ${{ steps.python-version-for-build.outputs.version }}
      wheel-distribution: ${{ steps.wheel-distribution.outputs.path }}
      sdist-distribution: ${{ steps.sdist-distribution.outputs.path }}

    steps:
      - name: Set Python version for build step
        id: python-version-for-build
        run: echo "::set-output name=version::3.10"  # <- Python version used for build release
      - uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ steps.python-version-for-build.outputs.version }}
      - name: Install tox
        run: python -m pip install tox
      - name: Lint code
        run: python -m tox -e lint
      - name: Build distribution files
        run: python -m tox -e build
      - name: Record the path of wheel distribution
        id: wheel-distribution
        run: |
          echo "::set-output name=path::$(ls dist/*.whl)"
      - name: Record the path of sdist distribution
        id: sdist-distribution
        run: |
          echo "::set-output name=path::$(ls dist/*.tar.gz)"
      - name: Store the distribution files for use in other stages
        uses: actions/upload-artifact@v2
        with:
          name: python-distribution-files
          path: |
            ${{ steps.wheel-distribution.outputs.path }}
            ${{ steps.sdist-distribution.outputs.path }}
          retention-days: 2
      - name: Debug pipeline stage output
        run: |
          echo python-version-for-build = ${{ steps.python-version-for-build.outputs.version }}
          echo wheel-distribution = ${{ steps.wheel-distribution.outputs.path }}
          echo sdist-distribution = ${{ steps.sdist-distribution.outputs.path }}

  develop-test:
    # Make sure `setuptools` can be installed in editable mode
    # and tests also run as they would do in the developer's machine
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          # Use a release that is not very new but still have a long life:
          python-version: "3.8"
      - name: Ensure setuptools can be installed in editable mode
        run: |
          python -m pip install -e .
      - name: Install tox
        run: |
          python -m pip install tox
      - name: Run tests
        run: python -m tox -- --cov-report xml --cov-report term

  test:
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        distutils:
        - stdlib
        - local
        python:
        - pypy-3.7
        - 3.7
        - 3.8
        - 3.9
        - "3.10"
        platform:
        - ubuntu-latest
        - macos-latest
        - windows-latest
    runs-on: ${{ matrix.platform }}
    env:
      SETUPTOOLS_USE_DISTUTILS: ${{ matrix.distutils }}
      PRE_BUILT_SETUPTOOLS_WHEEL: ${{ needs.prepare.outputs.wheel-distribution }}
      PRE_BUILT_SETUPTOOLS_SDIST: ${{ needs.prepare.outputs.sdist-distribution }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Install tox
        run: |
          python -m pip install tox
      - name: Isolate tests to avoid PYTHONPATH interference
        run: |
          # Avoid problems with import paths, see #2318, #3015:
          # `mkdir` `git rm` and `git mv` are OS-independent commands
          git mv setuptools/tests test_setuptools
          git mv pkg_resources/tests test_pkg_resources
          # Prevent local directories to take precedence over installed packages:
          mkdir src
          git mv _distutils_hack src
          git mv setuptools src
          git mv pkg_resources src
      - name: Retrieve pre-built distribution files
        uses: actions/download-artifact@v2
        with:
          name: python-distribution-files
          path: dist/
      - name: Skip some Pytest plugins on PyPy
        if: contains(matrix.python, 'pypy') && matrix.distutils == 'local' && matrix.platform != 'windows-latest'
        # PyPy 3.7 imports `distutils` in its `sysconfig`, which would trigger
        # `_distutils_hack` and potentially mess imports for `pep517` (used by some plugins)
        # https://foss.heptapod.net/pypy/pypy/-/blob/8301595a71447bbe58bb61c5ecd83d93cfda5eb0/lib-python/3/sysconfig.py#L461-473
        # https://foss.heptapod.net/pypy/pypy/-/blob/8301595a71447bbe58bb61c5ecd83d93cfda5eb0/lib_pypy/_sysconfigdata.py#L5
        # https://github.com/pypa/pep517/blob/a942316305395f8f757f210e2b16f738af73f8b8/pep517/in_process/_in_process.py#L76-L86
        run: echo 'PYTEST_ADDOPTS=-p no:perf' >> $GITHUB_ENV
      - name: Run tests
        run: >-
          python -m tox
          --installpkg '${{ needs.prepare.outputs.wheel-distribution }}'
          -- --cov-report xml --cov-report term --cov-config .coveragerc.ci
      - name: Publish coverage
        uses: codecov/codecov-action@v1
        with:
          flags: >-  # Mark which lines are covered by which envs
            ${{ runner.os }},
            ${{ matrix.python }}

  test_cygwin:
    needs: prepare
    strategy:
      matrix:
        distutils:
        - stdlib
        - local
    runs-on: windows-latest
    env:
      SETUPTOOLS_USE_DISTUTILS: ${{ matrix.distutils }}
      PRE_BUILT_SETUPTOOLS_WHEEL: ${{ needs.prepare.outputs.wheel-distribution }}
      PRE_BUILT_SETUPTOOLS_SDIST: ${{ needs.prepare.outputs.sdist-distribution }}
    steps:
      - uses: actions/checkout@v2
      - name: Install Cygwin with Python
        uses: cygwin/cygwin-install-action@v1
        with:
          platform: x86_64
          packages: >-
            git,
            gcc-core,
            python38,
            python38-devel,
            python38-pip
      - name: Install tox
        shell: C:\cygwin\bin\env.exe CYGWIN_NOWINPATH=1 CHERE_INVOKING=1 C:\cygwin\bin\bash.exe -leo pipefail -o igncr {0}
        run: |
          python3.8 -m pip install tox
      - name: Isolate tests to avoid PYTHONPATH interference
        shell: C:\cygwin\bin\env.exe CYGWIN_NOWINPATH=1 CHERE_INVOKING=1 C:\cygwin\bin\bash.exe -leo pipefail -o igncr {0}
        run: |
          # Avoid problems with import paths, see #2318, #3015:
          # `mkdir` `git rm` and `git mv` are OS-independent commands
          git mv setuptools/tests test_setuptools
          git mv pkg_resources/tests test_pkg_resources
          # Prevent local directories to take precedence over installed packages:
          mkdir src
          git mv _distutils_hack src
          git mv setuptools src
          git mv pkg_resources src
      - name: Retrieve pre-built distribution files
        uses: actions/download-artifact@v2
        with:
          name: python-distribution-files
          path: dist/
      - name: Run tests
        shell: C:\cygwin\bin\env.exe CYGWIN_NOWINPATH=1 CHERE_INVOKING=1 C:\cygwin\bin\bash.exe -leo pipefail -o igncr {0}
        run: >-
          python -m tox
          --installpkg '${{ needs.prepare.outputs.wheel-distribution }}'
          -- --cov-report xml --cov-report term --cov-config .coveragerc.ci
      - name: Publish coverage
        uses: codecov/codecov-action@v1
        with:
          flags: >-  # Mark which lines are covered by which envs
            cygwin
            ${{ matrix.python }}

  integration-test:
    strategy:
      matrix:
        distutils:
        - stdlib
        - local
    needs: [prepare, test]
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && contains(github.ref, 'refs/tags/'))
    # To avoid long times and high resource usage, we assume that:
    # 1. The setuptools APIs used by packages don't vary too much with OS or
    #    Python implementation
    # 2. Any circumstance for which the previous assumption is not valid is
    #    already tested via unit tests (or other tests not classified here as
    #    "integration")
    # With that in mind, the integration tests can run for a single setup
    runs-on: ubuntu-latest
    env:
      SETUPTOOLS_USE_DISTUTILS: ${{ matrix.distutils }}
      PRE_BUILT_SETUPTOOLS_WHEEL: ${{ needs.prepare.outputs.wheel-distribution }}
      PRE_BUILT_SETUPTOOLS_SDIST: ${{ needs.prepare.outputs.sdist-distribution }}
    steps:
      - uses: actions/checkout@v2
      - name: Install OS-level dependencies
        run: |
          sudo apt-get update
          sudo apt-get install build-essential gfortran libopenblas-dev
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          # Use a release that is not very new but still have a long life:
          python-version: "3.8"
      - name: Install tox
        run: |
          python -m pip install tox
      - name: Isolate tests to avoid PYTHONPATH interference
        run: |
          # Avoid problems with import paths, see #2318, #3015:
          # `mkdir` `git rm` and `git mv` are OS-independent commands
          git mv setuptools/tests test_setuptools
          git mv pkg_resources/tests test_pkg_resources
          # Prevent local directories to take precedence over installed packages:
          mkdir src
          git mv _distutils_hack src
          git mv setuptools src
          git mv pkg_resources src
      - name: Retrieve pre-built distribution files
        uses: actions/download-artifact@v2
        with:
          name: python-distribution-files
          path: dist/
      - name: Run integration tests
        run: >-
          python -m tox -e integration
          --installpkg '${{ needs.prepare.outputs.wheel-distribution }}'
          -- -vv --durations=10
          test_setuptools/integration

  release:
    needs: [prepare, test, test_cygwin, develop-test, integration-test]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.prepare.outputs-python-version-for-build }}
      - name: Install tox
        run: |
          python -m pip install tox
      - name: Release
        run: tox -e release
        env:
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
